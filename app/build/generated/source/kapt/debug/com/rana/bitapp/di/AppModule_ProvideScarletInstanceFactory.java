// Generated by Dagger (https://dagger.dev).
package com.rana.bitapp.di;

import com.tinder.scarlet.Lifecycle;
import com.tinder.scarlet.Scarlet;
import com.tinder.scarlet.retry.ExponentialWithJitterBackoffStrategy;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideScarletInstanceFactory implements Factory<Scarlet> {
  private final Provider<ExponentialWithJitterBackoffStrategy> backoffStrategyProvider;

  private final Provider<Lifecycle> lifecycleProvider;

  public AppModule_ProvideScarletInstanceFactory(
      Provider<ExponentialWithJitterBackoffStrategy> backoffStrategyProvider,
      Provider<Lifecycle> lifecycleProvider) {
    this.backoffStrategyProvider = backoffStrategyProvider;
    this.lifecycleProvider = lifecycleProvider;
  }

  @Override
  public Scarlet get() {
    return provideScarletInstance(backoffStrategyProvider.get(), lifecycleProvider.get());
  }

  public static AppModule_ProvideScarletInstanceFactory create(
      Provider<ExponentialWithJitterBackoffStrategy> backoffStrategyProvider,
      Provider<Lifecycle> lifecycleProvider) {
    return new AppModule_ProvideScarletInstanceFactory(backoffStrategyProvider, lifecycleProvider);
  }

  public static Scarlet provideScarletInstance(ExponentialWithJitterBackoffStrategy backoffStrategy,
      Lifecycle lifecycle) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideScarletInstance(backoffStrategy, lifecycle));
  }
}

// Generated by Dagger (https://dagger.dev).
package com.rana.bitapp.di;

import com.rana.bitapp.data.remote.websockets.BitfinexDataSource;
import com.rana.bitapp.domain.repository.BitfinexRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideBitfinexRepositoryImplFactory implements Factory<BitfinexRepository> {
  private final Provider<BitfinexDataSource> bitfinexDataSourceProvider;

  public AppModule_ProvideBitfinexRepositoryImplFactory(
      Provider<BitfinexDataSource> bitfinexDataSourceProvider) {
    this.bitfinexDataSourceProvider = bitfinexDataSourceProvider;
  }

  @Override
  public BitfinexRepository get() {
    return provideBitfinexRepositoryImpl(bitfinexDataSourceProvider.get());
  }

  public static AppModule_ProvideBitfinexRepositoryImplFactory create(
      Provider<BitfinexDataSource> bitfinexDataSourceProvider) {
    return new AppModule_ProvideBitfinexRepositoryImplFactory(bitfinexDataSourceProvider);
  }

  public static BitfinexRepository provideBitfinexRepositoryImpl(
      BitfinexDataSource bitfinexDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideBitfinexRepositoryImpl(bitfinexDataSource));
  }
}
